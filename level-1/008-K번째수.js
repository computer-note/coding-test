function solution(array, commands) {
  return commands.map(([i, j, k]) =>
    array
      .slice(i - 1, j)
      .sort((a, b) => a - b)
      .at(k - 1)
  );
}

/* 풀이 과정
command의 개수만큼 결과를 반환해야 한다는 요구사항에 착안해서
commands에 map 메서드를 적용하는 것으로 시작했습니다.

array의 i번째부터 j번째까지의 부분 배열을 구하는데에
slice 메서드를 활용해야겠다고 생각했습니다.
처음에 slice 메서드가 끝 인덱스를 포함하지 않는 
[a, b) 형식의 범위를 사용한다는 사실을 잊고 
[a, b]의 의미로 인자를 지정해서 오답을 냈습니다.

부분 집합을 오름차순으로 정렬하기 위해 sort 메서드를 인수 없이 사용했습니다.
기본 정렬이 오름차순이기 때문에 비교 함수가 필요없다고 생각했습니다.
하지만 sort 메서드의 기본 정렬 알고리즘은 
비교 대상을 문자열로 변환 후 유니코드 코드포인트 순서대로 정렬하기 때문에 
[-2, -1]을 정렬하면 [-1, -2]이 되고
[2, 12]를 정렬하면 [12, 2]가 된다는 사실을 알지 못했습니다.
이러한 방식은 수의 크기를 정렬하는데에는 적합하지 않기 떄문에 
명시적으로 비교함수를 전달할 필요가 있었습니다.
*/

/* 문제: K번째수
배열 array의 i번째 숫자부터 j번째 숫자까지 자르고 정렬했을 때, 
k번째에 있는 수를 구하려 합니다.

예를 들어 array가 [1, 5, 2, 6, 3, 7, 4], i = 2, j = 5, k = 3이라면

array의 2번째부터 5번째까지 자르면 [5, 2, 6, 3]입니다.
1에서 나온 배열을 정렬하면 [2, 3, 5, 6]입니다.
2에서 나온 배열의 3번째 숫자는 5입니다.

배열 array, [i, j, k]를 원소로 가진 2차원 배열 commands가 매개변수로 주어질 때, 
commands의 모든 원소에 대해 앞서 설명한 연산을 적용했을 때 나온 결과를 배열에 담아 return 하도록 solution 함수를 작성해주세요.

https://school.programmers.co.kr/learn/courses/30/lessons/42748
*/
